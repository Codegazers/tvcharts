{"version":3,"sources":["views/BestWorst.js","views/Episode.js","views/Home.js","views/List.js","api.js","pageTitle.js","views/Search.js","views/SearchForm.js","views/ShowPoster.js","views/SearchResults.js","windowResize.js","views/Seasons.js","views/Show.js","views/ShowDetails.js","App.js","serviceWorker.js","index.js"],"names":["BestWorst","props","useState","best","setBest","worst","setworst","useEffect","seasons","sort","a","b","averageRating","slice","reverse","className","Row","length","episodes","Episode","episode","ep","setEp","Col","Math","floor","target","rel","data-tip","data-for","id","href","tconst","type","title","numVotes","toLocaleString","Home","Container","List","list","setList","map","i","key","xs","url","process","search","fetch","encodeURIComponent","then","res","json","data","show","poster","response","sorted","reduce","r","seasonNumber","push","episodeNumber","Object","create","allEpisodes","titles","page","params","document","Search","query","setQuery","error","setError","results","setResults","isLoading","setLoading","handleQuery","useCallback","q","api","pageTitle","match","Alert","variant","shows","SearchForm","history","useHistory","Form","onSubmit","e","preventDefault","Group","controlId","Control","onChange","value","autoComplete","autoCorrect","spellCheck","placeholder","Button","ShowPoster","setPoster","link","Image","fluid","src","SearchResults","s","sm","md","to","primaryTitle","startYear","endYear","scale","el","getElementById","sw","scrollWidth","ow","offsetWidth","debounce","func","timer","event","clearTimeout","setTimeout","Seasons","setSeasons","setShowtconst","handleAllSeasons","handleScale","windowResize","allSeasons","handleResize","window","addEventListener","removeEventListener","keys","index","Show","setShow","setAllSeasons","setScale","handleShow","lg","style","transform","ShowDetails","setData","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.41a7f5e0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Row } from 'react-bootstrap';\r\nimport { List } from './';\r\n\r\nfunction BestWorst(props) {\r\n\r\n  const [best, setBest] = useState([]);\r\n  const [worst, setworst] = useState([]);\r\n\r\n  useEffect(() => {\r\n    props.seasons.sort((a, b) => a.averageRating - b.averageRating);\r\n    setBest( props.seasons.slice(-3).reverse() )\r\n    setworst( props.seasons.slice(0, 3) )\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"text-left mt-4 mb-5 ml-3\">\r\n      <h6>Best Episodes</h6>\r\n      <Row>\r\n        {(best.length > 0) &&  <List episodes={best} />}\r\n      </Row>\r\n      <h6 className=\"mt-3\">Worst Episodes</h6>\r\n      <Row>\r\n        {(worst.length > 0) && <List episodes={worst} />}\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BestWorst;","import React, { useState, useEffect } from 'react';\r\nimport { Col } from 'react-bootstrap';\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nfunction Episode(props) {\r\n\r\n  const [ep, setEp] = useState(props.episode);\r\n\r\n  useEffect(() => {\r\n    setEp(props.episode)\r\n  }, [props]);\r\n\r\n  return (\r\n    <Col className={`rating-${Math.floor(ep.averageRating)} mb-1 d-flex justify-content-center align-items-center`}>\r\n      <a target=\"_blank\"\r\n        rel=\"noopener noreferrer\" \r\n        data-tip data-for={props.id} \r\n        href={`https://www.imdb.com/title/${ep.tconst}/`}\r\n      >\r\n        {ep.averageRating}\r\n      </a>\r\n      <ReactTooltip id={props.id} type=\"dark\">\r\n        <h6 className='mb-0'>{ep.title}</h6>\r\n        <em>{ep.numVotes.toLocaleString()} votes</em>\r\n      </ReactTooltip>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default Episode;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { SearchForm } from './';\r\n\r\nfunction Home() {\r\n\r\n  return (\r\n    <Container>\r\n      <h1>TV Show Ratings</h1>\r\n      <h6>Graph of episode ratings of the entire series history</h6>\r\n      <SearchForm />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nfunction List(props) {\r\n\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setList( props.episodes )\r\n  }, [props]);\r\n\r\n  return (\r\n    <Col>\r\n      {list.map((ep, i) => (\r\n        <Row key={i}>\r\n          <Col xs={2}>{ep.averageRating}</Col>\r\n          <Col className=\"text-left\">\r\n            <a href={`https://www.imdb.com/title/${ep.tconst}/`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {ep.title}\r\n            </a>\r\n          </Col>\r\n        </Row>\r\n      ))}\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default List;","const url = process.env.REACT_APP_API_URL;\r\n\r\nfunction search(title) {\r\n  return fetch(`${url}/search/${encodeURIComponent(title)}`)\r\n  .then(res => res.json())\r\n  .then(data => data);\r\n}\r\n\r\nfunction show(tconst) {\r\n  return fetch(`${url}/show/${tconst}`)\r\n  .then(res => res.json())\r\n  .then(data => data[0]);\r\n}\r\n\r\nfunction poster(tconst) {\r\n  return fetch(`${url}/post/${tconst}`)\r\n  .then(res => res.json())\r\n  .then(data => data);\r\n}\r\n\r\nfunction episodes(tconst) {\r\n  return fetch(`${url}/seasons/${tconst}`)\r\n  .then(res => res.json())\r\n  .then(function(response) {\r\n    //Data returns array of Objs unsorted. Loop through items and group into ordered Obj for each season\r\n    let sorted = response.reduce((r, a) => {\r\n      r[a.seasonNumber] = r[a.seasonNumber] || [];\r\n      r[a.seasonNumber].push(a);\r\n      //sort season obj by episode\r\n      r[a.seasonNumber].sort((a,b) => (a.episodeNumber > b.episodeNumber) ? 1 : ((b.episodeNumber > a.episodeNumber) ? -1 : 0));\r\n      return r;\r\n    }, Object.create(null));\r\n    //return both for use in BestWorst and Seasons\r\n    return {\r\n      allEpisodes: response,\r\n      seasons: sorted\r\n    };\r\n  });\r\n}\r\n\r\nexport default {search, show, poster, episodes}","const titles = {\r\n  'home': 'TV Ratings Charts for Series Over All Time',\r\n  'show': 'TV Ratings for ',\r\n  'search': 'Search results for: '\r\n}\r\n\r\nexport default function(page, params) {\r\n  let title = (page in titles) ? titles[page] : ''\r\n  document.title = `${title} ${params} | TV Ratings Chart`\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Alert, Container, Row, Col } from 'react-bootstrap';\r\nimport { SearchForm, SearchResults } from './';\r\nimport api from '../api';\r\nimport pageTitle from '../pageTitle';\r\n\r\nfunction Search(props) {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [error, setError] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const handleQuery = useCallback((q) => {\r\n    //Reset data\r\n    setQuery(q)\r\n    setError(false)\r\n    setLoading(true)\r\n    setResults([])\r\n\r\n    api.search(q).then(res => {\r\n      if(res.response === false) {\r\n        setError(true)\r\n      } else {\r\n        setError(false)\r\n        setResults(res.results)\r\n        pageTitle('search', q)\r\n      }\r\n      setLoading(false);\r\n    })  \r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    handleQuery(props.match.params.query)\r\n  }, [ props.match.params.query, handleQuery ]) \r\n\r\n  return (\r\n    <Container>\r\n      <SearchForm />\r\n      {(isLoading) &&\r\n        <div>Searching ...</div>\r\n      }\r\n      {(results.length > 0 || error) &&\r\n        <Row><Col className=\"text-left\">Search results for \"{query}\"</Col></Row>\r\n      }\r\n      {(error) &&\r\n        <Alert variant=\"danger\">No Results Found</Alert>\r\n      }\r\n      {(results.length > 0) &&\r\n        <SearchResults shows={results} />\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\n\r\nfunction SearchForm() {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const history = useHistory();\r\n\r\n  function handleChange(e){\r\n    setQuery(e.target.value)\r\n  }\r\n\r\n  function handleSearch(e) {\r\n    e.preventDefault();\r\n    setQuery('')\r\n    history.push(`/search/${query}`)\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleSearch}>\r\n      <Row>\r\n        <Col xs={10}>\r\n          <Form.Group controlId=\"showTitle\">\r\n            <Form.Control \r\n              type=\"text\" \r\n              onChange={handleChange}\r\n              value={query}\r\n              autoComplete=\"off\"\r\n              autoCorrect=\"off\"\r\n              spellCheck=\"off\"\r\n              placeholder=\"example: The Office\" />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col xs={2}>\r\n          <Button type=\"submit\">Submit</Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React, { useState, useEffect } from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport api from '../api'\r\n\r\nfunction ShowPoster(props) {\r\n\r\n  const [poster, setPoster] = useState('');\r\n\r\n  useEffect(() => {\r\n    api.poster(props.tconst).then(res => setPoster(res))\r\n  }, [props.tconst]);\r\n\r\n  return (\r\n    <a href={props.link} target={props.target}>\r\n      <Image fluid src={poster} className=\"p-2\" />\r\n    </a>    \r\n  );\r\n}\r\n\r\nexport default ShowPoster;","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { ShowPoster } from './'\r\n\r\nfunction SearchResults(props) {\r\n\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setList(props.shows)\r\n  }, [props.shows]);\r\n\r\n  return (\r\n    <Row>\r\n      {list.map((s, i) => (\r\n        <Col xs={6} sm={4} md={3} key={i} className='text-center p-3'>\r\n          <ShowPoster \r\n            tconst={s.tconst}\r\n            target=\"_self\"\r\n            link={`/show/${s.tconst}`}\r\n          />\r\n          <Link to={`/show/${s.tconst}`}>\r\n            <h5 className='mt-2 mb-0'>\r\n              {s.primaryTitle}\r\n            </h5>\r\n          </Link>\r\n          <em>{s.startYear} - {(s.endYear === \"\\\\N\") ? '' : s.endYear}</em>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default SearchResults;","function scale(id) {\r\n  var el = document.getElementById(id)\r\n  if(el) {\r\n    let sw = el.scrollWidth;\r\n    let ow = el.offsetWidth;\r\n    let scale = (sw > ow) ? (ow/sw) : 1;\r\n    return scale;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction debounce(func) {\r\n  var timer;\r\n  return function(event){\r\n    if(timer) clearTimeout(timer);\r\n    timer = setTimeout(func,200,event);\r\n  };\r\n}\r\n\r\nexport default {scale, debounce}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Episode } from './';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport windowResize from '../windowResize';\r\nimport api from '../api';\r\n\r\nfunction Seasons(props) {\r\n\r\n  const [seasons, setSeasons] = useState({});\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  const setShowtconst = useCallback((tconst) => {\r\n    api.episodes(tconst)\r\n    .then((res) => {\r\n      setSeasons(res.seasons);\r\n      setLoading(false);\r\n      handleAllSeasons(res.allEpisodes);\r\n      handleScale(windowResize.scale('ratings'))\r\n    })\r\n  }, []);\r\n\r\n  const handleAllSeasons = useCallback((allSeasons) => {\r\n    props.handleAllSeasons(allSeasons)\r\n  }, [])\r\n\r\n  const handleScale = useCallback((scale) => {\r\n    props.handleScale(scale)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setShowtconst(props.tconst)\r\n    //Resize window trigger with debounce timer\r\n    const handleResize = windowResize.debounce(e => {\r\n      let scale = windowResize.scale('ratings');\r\n      handleScale(scale)\r\n    });\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [ props.tconst ])\r\n\r\n\r\n  return (\r\n    <Row>\r\n      {isLoading ? (\r\n        <div>Loading ...</div>\r\n      ) : (\r\n        Object.keys(seasons).map((s,index) => (\r\n          <Col xs={1} key={index} className=\"mr-1 p-0\">\r\n            <strong>{s}</strong>\r\n            {seasons[s].map((e,i) => (\r\n              <Episode\r\n                key={i}\r\n                episode={e}\r\n                scale={props.scale}\r\n                id={`S${e.seasonNumber}E${e.episodeNumber}`}\r\n              />\r\n            ))}\r\n          </Col>\r\n        ))\r\n      )}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Seasons;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport { BestWorst, Seasons, ShowDetails, SearchForm } from './';\r\nimport api from '../api';\r\nimport pageTitle from '../pageTitle';\r\n\r\nfunction Show(props) {\r\n  const [show, setShow] = useState({});\r\n  const [allSeasons, setAllSeasons] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [scale, setScale] = useState(1);\r\n\r\n  const handleShow = useCallback((tconst) => {\r\n    api.show(tconst).then(data => {\r\n      if(!data) {\r\n        setError(true)\r\n        setLoading(false)\r\n      } else {\r\n        setError(false)\r\n        setShow(data)\r\n        setLoading(false)\r\n        pageTitle('show', data.primaryTitle)  \r\n      }\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    handleShow(props.match.params.tconst)\r\n  }, [props.match.params.tconst, handleShow]);\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      <Row>\r\n        <SearchForm />\r\n      </Row>\r\n      {error && \r\n        <Col xs={3}>\r\n          <Alert variant=\"danger\">Show Not Found</Alert>\r\n        </Col>\r\n      }\r\n      {isLoading && <div>Loading ...</div>}\r\n      {(!isLoading && !error) &&\r\n        <Row>\r\n          <Col lg={2} md={3} sm={4}>\r\n            <ShowDetails show={show} />\r\n            <BestWorst seasons={allSeasons} />\r\n          </Col>\r\n          <Col lg={10} md={9} sm={8} id=\"ratings\" className=\"pl-4\" style={{transform: `scale(${scale}`}}>\r\n            <Seasons\r\n              tconst={show.tconst}\r\n              handleAllSeasons={setAllSeasons}\r\n              handleScale={setScale}\r\n              scale={scale}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Show;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { ShowPoster } from  './'\r\n\r\nfunction ShowDetails(props) {\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    setData(props.show);\r\n  }, [props.show]);\r\n\r\n  return (\r\n    <Col className=\"text-left\">\r\n      <Row>\r\n        <ShowPoster \r\n          tconst={data.tconst}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          link={`https://www.imdb.com/title/${data.tconst}/`}\r\n        />\r\n      </Row>\r\n      <a href={`https://www.imdb.com/title/${data.tconst}/`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <h4>{data.primaryTitle}</h4>\r\n      </a>\r\n      <h6>{data.startYear} - {(data.endYear === \"\\\\N\") ? '' : data.endYear}</h6>\r\n      <h4>\r\n        <strong className='pr-2'>{data.averageRating}</strong>\r\n        <small>({(data.numVotes) && data.numVotes.toLocaleString()})</small>\r\n      </h4>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default ShowDetails;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { Home, Search, Show } from './views';\nimport './styles/App.scss';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/search/:query\" component={Search} />\n            <Route exact path=\"/show/:tconst\" component={Show} />\n          </Switch>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}